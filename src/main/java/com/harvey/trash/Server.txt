package TCP_NET;


import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.*;



class ServerDemo {
    public static final int PORT = 8888;
    public static void main(String[] args) throws IOException {
        new Server(PORT);
    }
}
class Time implements Runnable{
    @Override
    public void run() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd-HH:mm:ss  ");
        while (true) {
            Date date = new Date();
            time = sdf.format(date);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ignored) {

            }
        }
        //由于服务器不会关,所以这个线程不会关

    }
    public static String time;
}

class User{
    private final Socket cSocket;

    public Socket getCSocket() {
        return cSocket;
    }

    private final String userName;

    public String getUserName() {
        return userName;
    }


    public User(Socket cSocket, String userName) {
        this.cSocket = cSocket;
        this.userName = userName;
    }
}

/**
 * 服务端收消息
 * @author HarveyBlocks
 * @date 2023/10/12 00:33
 **/
public class Server {

    List<User> users ;
    private ServerSocket serverSocket ;
    private final int port;
    public Server(int port) throws IOException {
        new Thread(new Time()).start();
        this.port = port;
        users = new ArrayList<>();
        createAndReceive();
    }
    //服务器端口

    public void createServer() throws IOException {
        //创建ServerSocket对象, 同时为服务端注册端口
        this.serverSocket= new ServerSocket(port);
        System.out.println("\033[1;32m服务器已成功创建\033[0m");
    }


    //接收客户端
    public void createAndReceive() throws IOException {
        createServer();

        //创建线程池
        ExecutorService pool = new ThreadPoolExecutor(
                3,
                5,
                20,
                TimeUnit.SECONDS,//枚举变量TimeUnit
                new ArrayBlockingQueue<>(6),//基于数组,限制大小,最多缓存4个队伍
                Executors.defaultThreadFactory(),//获取默认的线程工厂,一般用这个
                new ThreadPoolExecutor.AbortPolicy()
                //AbortPolicy是ThreadPoolExecutor的内部类,实现了RejectedExecutionHandler接口
                //抛出异常,丢弃任务
        );


        while (true) {
            //使用serverSocket对象,调用一个accept方法,等待客户端的连接请求
            Socket cSocket = serverSocket.accept();
            InputStream is = cSocket.getInputStream();

            //把原始字节输入流包装成数据输入流
            DataInputStream dis = new DataInputStream(is);
            String userName = dis.readUTF();
            User user = new User(cSocket, userName);
            users.add(user);
            System.out.print(Time.time);
            System.out.println("\033[1;35m" + cSocket.getRemoteSocketAddress() + " enter" + "\033[0m");
            //把socket分配给独立线程
            pool.execute(new ServerReaderThread(user, users));
            //pool.execute(Runnable);执行Runnable任务

            //线程池会自动创建一个新线程,自动处理这个任务,自动执行;
        }

        //想关掉?:
        //pool.shutdown();
    }
}
class ServerReaderThread implements Runnable{
    private final User user;
    private final List<User> users;

    public ServerReaderThread(User user,List<User> users) throws IOException {
        this.user = user;
        this.users = users;
        sendToAll("\033[1;35m"+
                user.getUserName()+"进入房间"
                +"\033[0m\n");
    }

    //发送给所有在线的socket管道接收
    private void sendToAll(String s) throws IOException {
        for (User targetUser: users) {
            if (targetUser.getCSocket().equals(user.getCSocket())){
                continue;
            }
            OutputStream os = targetUser.getCSocket().getOutputStream();
            DataOutputStream dos = new DataOutputStream(os);
            dos.writeUTF(s);
            dos.flush();
        }
    }

    @Override
    public void run() {
        //从socket通信管道中得到一个字节输入流
        InputStream is = null;
        try {
            is = user.getCSocket().getInputStream();
        } catch (IOException ignored) {

        }

        //把原始字节输入流包装成数据输入流
        assert is != null;//断言 is!=null
        DataInputStream dis = new DataInputStream(is);


        String message;
        while (true) {
            try {
                //使用数据输入流读取客户端发来的信息
                message = dis.readUTF();
            } catch (Exception e){
                System.out.print(Time.time);
                System.out.println("\033[1;34m"+
                                user.getCSocket().getRemoteSocketAddress()+" left"
                                +"\033[0m"
                );
                try {
                    sendToAll("\033[1;34m"+
                            user.getUserName()+" 已离开"
                            +"\033[0m\n");
                } catch (IOException ignored) {

                }
                users.remove(user);
                break;
            }

            //获取客户端IP地址和端口号
            System.out.print(Time.time);
            System.out.print(user.getCSocket().getRemoteSocketAddress()+":");
            System.out.println("\033[1;32m"+message+"\033[0m" );
            try {
                sendToAll(user.getUserName()+" :");
                sendToAll("\t\033[1;36m"+message+"\033[0m" +"\n");
            } catch (IOException ignored) {

            }

        }

        //释放资源
        try {
            dis.close();
            user.getCSocket().close();
        }catch (IOException ignored) {

        }
    }
}
====================分割线=======================package TCP_NET;

import java.io.*;
import java.net.*;
import java.util.Scanner;

/**
 * 客户端发消息
 * @author HarveyBlocks
 * @date 2023/10/12 00:33
 **/

class ClientDemo {
    public static void main(String[] args) throws IOException {
        new Client();
    }
}
public class Client {
    private final static Scanner SCANNER = new Scanner(System.in);
    public Client() throws IOException {
        this.creatAndSend();
        SCANNER.nextLine();
        SCANNER.close();
    }
    private String userName;

    private Socket socket ;
    private void creatAndSend() throws IOException {
        this.initiate();
        this.send();
    }

    private void setUserName(){
        System.out.print("是否为自己取一个名字?(Y/N)");
        String choice = SCANNER.nextLine().toUpperCase().trim();

        switch (choice){
            case "Y":
            case "YES":
                System.out.print("请输入用户名:");
                userName = SCANNER.nextLine().trim();
                System.out.println("取名成功");
                break;
            default:
                System.out.println("将自动为你创建一个名字");
                if(socket!=null) {
                    userName = socket.getLocalAddress().toString()+":"+
                            socket.getLocalPort();
                }
        }
    }
    private static final int SERVER_PORT = 8888;
    private static final String SERVER_IP = "169.254.128.11";
    private void initiate(){

        isConnect = false;
        while (!isConnect) {
            try {
                this.socket= new Socket(SERVER_IP, SERVER_PORT);
                setUserName();
                isConnect = true;
            } catch (ConnectException e) {
                System.out.println("\033[1;31m服务器未开启\033[0m , 等待3秒后将尝试重新连接");
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException ignored) {

                }
                System.out.println("再次尝试重新连接");
            } catch (IOException ignored) {

            }
        }
        System.out.println("\033[1;32m客户端已连接服务器\n" +
                "您已进入房间\033[0m"
        );
        System.out.println("\033[1;33m" +
                "*****************************************************\n"+
                "*                      使用须知                    \t*\n"+
                "*                 这是一个群聊的聊天室               \t*\n"+
                "*               请在空白处键入你想说的话             \t*\n"+
                "*        本聊天室不支持一次性输入多行的文字,请注意     \t*\n"+
                "*            如果你要离开,请输入exit(全小写)         \t*\n"+
                "*   如果你想在聊界面中输入\"exit\",在末尾输入空格即可   \t*\n"+
                "*****************************************************\n"+
                "\033[0m");
        //此时创建一个线程随时帮助接收服务器发来的消息
        new Thread(new ClientReaderThread(socket,this)).start();

    }
    private boolean isConnect;
    public void setIsConnect(boolean isConnect){
        this.isConnect = isConnect;
    }
    private void send() throws IOException {

        OutputStream os = this.socket.getOutputStream();//socket的os

        //把低级的字节输出流包装成数据输出流
        DataOutputStream dos = new DataOutputStream(os);

        //发送用户名
        if(isConnect){
            //开始写数据除去给服务端
            dos.writeUTF(userName);
            dos.flush();//立刻发出去,防止占内存
        }else {
            System.out.println("\033[1;34m服务器已下线!\033[0m");
        }

        label:while(true){
            String string = SCANNER.nextLine();
            //出口
            string = exit(string);
            switch (string){
                case "0"://YES
                    dos.close();
                    this.socket.close();
                    break label;
                case "1"://NO
                    continue;
                default:
                    break;
            }

            if(isConnect){
                //开始写数据除去给服务端
                dos.writeUTF(string);
                dos.flush();//立刻发出去,防止占内存
            }else {
                System.out.println("\033[1;34m服务器已下线!\033[0m");
                break;
            }
        }

        System.out.println("\033[1;34m您已退出该服务\033[0m");

    }
    private String exit(String string) {
        if("exit".equals(string)) {
            System.out.print("\033[1;31m是否退出?(Y/N)\033[0m");
            string = SCANNER.nextLine();//去除空白符
            String ans = string.trim().toUpperCase();
            if ("Y".equals(ans) || "YES".equals(ans)){
                return "0";
            } else if ("N".equals(ans) || "NO".equals(ans)) {
                return "1";
            }
        }
        return string;
    }
}
class ClientReaderThread implements Runnable{
    private final Client clientMethod;
    private final Socket socket;

    public ClientReaderThread(Socket socket, Client client){
        this.socket = socket;
        this.clientMethod = client;
    }
    @Override
    public void run() {

        //从socket通信管道中得到一个字节输入流
        InputStream is = null;
        try {
            is = socket.getInputStream();
        } catch (IOException ignored) {

        }

        //把原始字节输入流包装成数据输入流
        DataInputStream dis = new DataInputStream(is);
        String message;
        while (true) {
            try {
                //使用数据输入流读取服务器发来的信息
                message = dis.readUTF();
                clientMethod.setIsConnect(true);
            } catch (Exception e) {
                clientMethod.setIsConnect(false);
                break;
            }
            //获取客户端IP地址和端口号
            System.out.print(message);
        }
    }
}
